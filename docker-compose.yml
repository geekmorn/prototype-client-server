services:
  db:
    image: postgres
    container_name: fastproto-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-appuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-apppassword}
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-appuser} -d ${POSTGRES_DB:-appdb}"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - db_data:/var/lib/postgresql/data

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fastproto-backend
    environment:
      # Application Configuration
      APP_NAME: ${APP_NAME:-Fast Prototype API}
      APP_ENV: ${APP_ENV:-production}
      DEBUG: ${DEBUG:-false}
      
      # Database Configuration
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_USER: ${DATABASE_USER:-${POSTGRES_USER:-appuser}}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-${POSTGRES_PASSWORD:-apppassword}}
      DATABASE_NAME: ${DATABASE_NAME:-${POSTGRES_DB:-appdb}}
      DATABASE_SSLMODE: ${DATABASE_SSLMODE:-disable}
      
      # Alternative: Direct database URL (overrides individual components above)
      DATABASE_URL: ${DATABASE_URL}
      
      # Alembic Configuration
      ALEMBIC_SCRIPT_LOCATION: ${ALEMBIC_SCRIPT_LOCATION:-alembic}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    command: ["/bin/sh", "-c", "python -m app.utils.wait_for_db && python run_migrations.py && uvicorn app.main:app --host 0.0.0.0 --port 8000"]

volumes:
  db_data:


