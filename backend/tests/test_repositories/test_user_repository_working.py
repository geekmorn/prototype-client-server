import pytest
from unittest.mock import AsyncMock, patch, MagicMock
from app.repositories.user_repository import UserRepository
from app.schemas.user import UserCreate, UserUpdate
from app.models.user import User


class TestUserRepositoryWorking:
    """Test cases for UserRepository using proper mocks."""
    
    @pytest.mark.asyncio
    async def test_create_user(self):
        """Test creating a new user."""
        # Mock session
        mock_session = AsyncMock()
        mock_session.add = MagicMock()
        mock_session.flush = AsyncMock()
        mock_session.refresh = AsyncMock()
        
        repo = UserRepository(mock_session)
        user_data = UserCreate(
            email="test@example.com",
            full_name="Test User",
            password="password123"
        )
        
        with patch('app.core.security.get_password_hash', return_value="hashed_password"):
            result = await repo.create(user_data)
        
        assert result.email == "test@example.com"
        assert result.full_name == "Test User"
        # Don't test the exact hash since it's generated by bcrypt
        assert result.hashed_password is not None
        assert len(result.hashed_password) > 0
        mock_session.add.assert_called_once()
        mock_session.flush.assert_called_once()
        mock_session.refresh.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_get_by_id_existing_user(self):
        """Test getting an existing user by ID."""
        mock_session = AsyncMock()
        mock_user = User(
            id=1,
            email="test@example.com",
            full_name="Test User",
            hashed_password="hashed_password"
        )
        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = mock_user
        mock_session.execute.return_value = mock_result
        
        repo = UserRepository(mock_session)
        result = await repo.get_by_id(1)
        
        assert result == mock_user
        mock_session.execute.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_get_by_id_nonexistent_user(self):
        """Test getting a non-existent user by ID."""
        mock_session = AsyncMock()
        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = None
        mock_session.execute.return_value = mock_result
        
        repo = UserRepository(mock_session)
        result = await repo.get_by_id(999)
        
        assert result is None
        mock_session.execute.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_get_by_email_existing_user(self):
        """Test getting an existing user by email."""
        mock_session = AsyncMock()
        mock_user = User(
            id=1,
            email="test@example.com",
            full_name="Test User",
            hashed_password="hashed_password"
        )
        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = mock_user
        mock_session.execute.return_value = mock_result
        
        repo = UserRepository(mock_session)
        result = await repo.get_by_email("test@example.com")
        
        assert result == mock_user
        mock_session.execute.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_get_by_email_nonexistent_user(self):
        """Test getting a non-existent user by email."""
        mock_session = AsyncMock()
        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = None
        mock_session.execute.return_value = mock_result
        
        repo = UserRepository(mock_session)
        result = await repo.get_by_email("nonexistent@example.com")
        
        assert result is None
        mock_session.execute.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_update_user_existing(self):
        """Test updating an existing user."""
        mock_session = AsyncMock()
        mock_user = User(
            id=1,
            email="test@example.com",
            full_name="Test User",
            hashed_password="hashed_password"
        )
        
        # Mock get_by_id to return the user
        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = mock_user
        mock_session.execute.return_value = mock_result
        
        repo = UserRepository(mock_session)
        update_data = UserUpdate(
            full_name="Updated Name",
            email="updated@example.com"
        )
        
        result = await repo.update(1, update_data)
        
        assert result == mock_user
        assert result.full_name == "Updated Name"
        assert result.email == "updated@example.com"
        mock_session.flush.assert_called_once()
        mock_session.refresh.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_update_user_nonexistent(self):
        """Test updating a non-existent user."""
        mock_session = AsyncMock()
        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = None
        mock_session.execute.return_value = mock_result
        
        repo = UserRepository(mock_session)
        update_data = UserUpdate(full_name="Updated Name")
        
        result = await repo.update(999, update_data)
        
        assert result is None
        mock_session.execute.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_update_user_partial(self):
        """Test partial update of a user."""
        mock_session = AsyncMock()
        mock_user = User(
            id=1,
            email="test@example.com",
            full_name="Test User",
            hashed_password="hashed_password"
        )
        
        # Mock get_by_id to return the user
        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = mock_user
        mock_session.execute.return_value = mock_result
        
        repo = UserRepository(mock_session)
        update_data = UserUpdate(full_name="Updated Name")
        
        result = await repo.update(1, update_data)
        
        assert result == mock_user
        assert result.full_name == "Updated Name"
        assert result.email == "test@example.com"  # Should remain unchanged
        mock_session.flush.assert_called_once()
        mock_session.refresh.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_get_all_users_no_search(self):
        """Test getting all users without search filter."""
        mock_session = AsyncMock()
        mock_users = [
            User(id=1, email="user1@example.com", full_name="User One", hashed_password="hash1"),
            User(id=2, email="user2@example.com", full_name="User Two", hashed_password="hash2")
        ]
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = mock_users
        mock_session.execute.return_value = mock_result
        
        repo = UserRepository(mock_session)
        result = await repo.get_all_users()
        
        assert result == mock_users
        mock_session.execute.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_get_all_users_with_name_search(self):
        """Test getting all users with name search filter."""
        mock_session = AsyncMock()
        mock_users = [
            User(id=1, email="john@example.com", full_name="John Doe", hashed_password="hash1")
        ]
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = mock_users
        mock_session.execute.return_value = mock_result
        
        repo = UserRepository(mock_session)
        result = await repo.get_all_users("john")
        
        assert result == mock_users
        mock_session.execute.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_get_all_users_with_email_search(self):
        """Test getting all users with email search filter."""
        mock_session = AsyncMock()
        mock_users = [
            User(id=1, email="test@example.com", full_name="Test User", hashed_password="hash1")
        ]
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = mock_users
        mock_session.execute.return_value = mock_result
        
        repo = UserRepository(mock_session)
        result = await repo.get_all_users("test@example.com")
        
        assert result == mock_users
        mock_session.execute.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_get_all_users_empty_result(self):
        """Test getting all users when no users match search criteria."""
        mock_session = AsyncMock()
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = []
        mock_session.execute.return_value = mock_result
        
        repo = UserRepository(mock_session)
        result = await repo.get_all_users("nonexistent")
        
        assert result == []
        mock_session.execute.assert_called_once()